package database;

import java.sql.*;

import config.Configuration;

/**
 * 
 * Table used for handling communication between
 * the operator and the company peer
 * 
 * @author Nicolai
 *
 */

public class TripOffersDAO {

	private Connection con;
	private PreparedStatement preparedStatement;
	private ResultSet resultSet;
	
	Configuration config = Configuration.getConfiguration();
	
	
	/**
	 * 
	 * Find the customer, which ordered first and return a string array of trip ID and customer coordinate.
	 * Delete the customer afterwards..
	 * 
	 * @return
	 */
	public String[] getCustomer() {
		
		String customer[] = new String[2];
		customer[0] = "none";
		int id = 0;
		
		String query1 = "SELECT * FROM trip_offers ORDER BY time_ordered";
		
		String query2 = "DELETE FROM trip_offers WHERE id = ?";
		
		con = null;

		try {

			con = PostgresqlConnectionFactory.createConnection();
			preparedStatement = con.prepareStatement(query1);
			
			resultSet = preparedStatement.executeQuery();
			
			if(resultSet.next()) {
				id = resultSet.getInt("id");
				customer[0] = Integer.toString(id);
				
				customer[1] = resultSet.getString("destination");
				
				while(customer[0].length() < 8) {
					customer[0] = "0" + customer[0];
				}
				
				customer[0] = config.getCompanyID() + customer[0];
				
			}
			
			preparedStatement.close();
			
			preparedStatement = con.prepareStatement(query2);
			preparedStatement.setInt(1, id);
			preparedStatement.executeUpdate();
			preparedStatement.close();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (con != null) {
				try {
					con.close();
				} catch (SQLException e1) {
					System.out.println("Failed Closing of Database!");
				}
			}
		}
		
		return customer;
	}

	/**
	 * 
	 * Adds a new customer by a coordinate.
	 * trip ID is autogenerated.
	 * 
	 * @param destination
	 * @return
	 */
	public boolean addTrip(String destination) {
	      String cardsQuery = "INSERT INTO trip_offers (destination, time_ordered) VALUES (?, ?)";

	      int rowCount = 0;
	      con = null;

	      try {
	         con = PostgresqlConnectionFactory.createConnection();
	         preparedStatement = con.prepareStatement(cardsQuery);
	         preparedStatement.setString(1, destination);

	         java.util.Date date = new java.util.Date(System.currentTimeMillis());
	         java.sql.Timestamp timestamp = new java.sql.Timestamp(date.getTime());
	         preparedStatement.setTimestamp(2, timestamp);

	         rowCount = preparedStatement.executeUpdate();
	         preparedStatement.close();

	      } catch (SQLException e) {
	         e.printStackTrace();
	      } finally {
	         if (con != null) {
	            try { con.close(); }
	            catch (SQLException e1) { System.out.println("Failed Closing of Database!"); }
	         }
	      }
	      // We want to return false if INSERT was unsuccesfull, else return true
	      if (rowCount == 0) { return false; }
	      else { return true; }

	   }
}
